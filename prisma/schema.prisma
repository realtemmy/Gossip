generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Category {
  id         Int      @id @default(autoincrement())
  name       String   @unique
  icon       String?
  color      String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  groupCount Int      @default(0)
  groups     Group[]

  @@map("categories")
}

model Group {
  id            Int            @id @default(autoincrement())
  name          String
  slug          String
  categoryId    Int
  members       Int            @default(0)
  lastActive    DateTime       @default(now())
  trending      Boolean        @default(false)
  verified      Boolean        @default(false)
  conversations Conversation[]
  Category      Category       @relation(fields: [categoryId], references: [id])

  @@map("groups")
}

model Conversation {
  id        Int       @id @default(autoincrement())
  title     String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  group_id  Int
  groups    Group     @relation(fields: [group_id], references: [id], onDelete: Cascade)
  messages  Message[]
  unread    Int       @default(0)

  @@map("conversations")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified Boolean @default(false)
  image         String?
  accounts      Account[]
  sessions      Session[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("users")
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

model Message {
  id             Int           @id @default(autoincrement())
  content        String
  senderId       String
  receiverId     String
  conversationId Int
  status         MessageStatus @default(PENDING)
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  conversation   Conversation  @relation(fields: [conversationId], references: [id], onDelete: Cascade)

  @@map("messages")
}

enum MessageStatus {
  PENDING
  SENT
  DELIVERED
}
